{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\owner\\\\Desktop\\\\BootCamp\\\\React Portfolio\\\\react_portfolio\\\\src\\\\components\\\\Portfolio\\\\Portfolio.js\";\nimport React from 'react';\nimport { MDBBtn, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol, MDBContainer, MDBRow } from 'mdbreact';\nimport dineImg from '../../images/DineInDineOut.jpg';\nimport weatherImg from '../../images/WeatherDashboard.jpg';\nimport workDayImg from '../../images/WorkDayScheduler.jpg';\nimport burgerImg from '../../eatdaburger.jpg';\nimport dasImg from '../../images/dasFlix.jpg';\nimport workOutImg from '../../images//FitnessTracker.gif';\nconst projects = [{\n  \"id\": 1,\n  \"name\": \"Dine-In or Dine-Out\",\n  \"image\": \"DineInDineOut.jpg\",\n  \"description\": \"Project where the user can input a type of meal and their zip code and then receive results of recipes or restaurants that serve the meal near them.\",\n  \"gihub\": \"https://github.com/denzgrant/SnapesOnAPlane\",\n  \"url\": \"https://denzgrant.github.io/SnapesOnAPlane/\"\n}, {\n  \"id\": 2,\n  \"name\": \"Weather Dashboard\",\n  \"image\": \"../../images/WeatherDashboard.jpg\",\n  \"description\": \"Weather Dashboard uses API calls to get the current and 5-Day forecast for any location by typing in the citie's name.\",\n  \"gihub\": \"https://github.com/denzgrant/Weather-Dashboard\",\n  \"url\": \"https://denzgrant.github.io/Weather-Dashboard/\"\n}, {\n  \"id\": 3,\n  \"name\": \"Work Day Scheduler\",\n  \"image\": \"../../images/WorkDayScheduler.jpg\",\n  \"description\": \"Allows the user to saves tasks and highlight future work hours. Tasks are saved in local storage and moment.js is used to highlight the hour of the day block.\",\n  \"gihub\": \"https://github.com/denzgrant/Work-Day-Scheduler\",\n  \"url\": \"https://denzgrant.github.io/Work-Day-Scheduler/\"\n}, {\n  \"id\": 4,\n  \"name\": \"Eat-Da-Burger\",\n  \"image\": \"../../images/eatdaburger.jpg\",\n  \"description\": \"Eat-Da-Burger! is a restaurant app that lets users input the name of burgers they'd like to eat mad with Express and MySQL. This project follows the MVC design.\",\n  \"gihub\": \"https://github.com/denzgrant/Eat-Da-Burger-\",\n  \"url\": \"https://drg-eat-da-burger.herokuapp.com/\"\n}, {\n  \"id\": 5,\n  \"name\": \"DasFlix\",\n  \"image\": \"/FitnessTracker.gif\",\n  \"description\": \"A full-stack application where the user can create watchlists consisting of cards representing movies/tv shows, these cards are rendered to the page from a third party API. Local username and password authentication is used to access the website. The userâ€™s watchlist, password, and username is stored in a database. Feel free to use the test login, username: '1@1'. password: '1'\",\n  \"gihub\": \"https://github.com/denzgrant/DasFlix-\",\n  \"url\": \"http://www.dasflix.com/\"\n}, {\n  \"id\": 6,\n  \"name\": \"Workout Tracker\",\n  \"image\": \"../../images/dasFlix.jpg\",\n  \"description\": \"Workout Tracker application that utilizes Mongoose to allow the user to add new exercises to a new workout plan or add exercises to a previous workout plan. A stats page is rendered based on the multiples exercises created.\",\n  \"gihub\": \"https://github.com/denzgrant/Workout-Tracker\",\n  \"url\": \"http://lower-goose-19055.herokuapp.com/\"\n}];\n\nconst Portfolio = () => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MDBContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MDBRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, projects.map(proj => /*#__PURE__*/React.createElement(MDBCol, {\n    sm: \"6\",\n    md: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MDBCard, {\n    style: {\n      width: \"25rem\",\n      height: \"20rem\",\n      marginTop: \"3em\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(MDBCardImage, {\n    className: \"img-fluid\",\n    src: 'proj.image',\n    waves: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(MDBCardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(MDBCardTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 19\n    }\n  }, proj.name), /*#__PURE__*/React.createElement(MDBCardText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 19\n    }\n  }, proj.description), /*#__PURE__*/React.createElement(MDBBtn, {\n    href: proj.gihub,\n    target: \"_blank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 19\n    }\n  }, \"Github\"), /*#__PURE__*/React.createElement(MDBBtn, {\n    href: proj.url,\n    target: \"_blank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 19\n    }\n  }, \"Demo\"))))))));\n};\n\nexport default Portfolio;","map":{"version":3,"sources":["C:/Users/owner/Desktop/BootCamp/React Portfolio/react_portfolio/src/components/Portfolio/Portfolio.js"],"names":["React","MDBBtn","MDBCard","MDBCardBody","MDBCardImage","MDBCardTitle","MDBCardText","MDBCol","MDBContainer","MDBRow","dineImg","weatherImg","workDayImg","burgerImg","dasImg","workOutImg","projects","Portfolio","map","proj","width","height","marginTop","name","description","gihub","url"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { MDBBtn, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol, MDBContainer, MDBRow } from 'mdbreact';\r\nimport dineImg from '../../images/DineInDineOut.jpg';\r\nimport weatherImg from '../../images/WeatherDashboard.jpg';\r\nimport workDayImg from '../../images/WorkDayScheduler.jpg';\r\nimport burgerImg from '../../eatdaburger.jpg';\r\nimport dasImg from '../../images/dasFlix.jpg';\r\nimport workOutImg from '../../images//FitnessTracker.gif'\r\n\r\n\r\nconst projects = [\r\n  {\r\n    \"id\": 1,\r\n    \"name\": \"Dine-In or Dine-Out\",\r\n    \"image\": \"DineInDineOut.jpg\",\r\n    \"description\": \"Project where the user can input a type of meal and their zip code and then receive results of recipes or restaurants that serve the meal near them.\",\r\n    \"gihub\": \"https://github.com/denzgrant/SnapesOnAPlane\",\r\n    \"url\": \"https://denzgrant.github.io/SnapesOnAPlane/\"\r\n  },\r\n  {\r\n    \"id\": 2,\r\n    \"name\": \"Weather Dashboard\",\r\n    \"image\": \"../../images/WeatherDashboard.jpg\",\r\n    \"description\": \"Weather Dashboard uses API calls to get the current and 5-Day forecast for any location by typing in the citie's name.\",\r\n    \"gihub\": \"https://github.com/denzgrant/Weather-Dashboard\",\r\n    \"url\": \"https://denzgrant.github.io/Weather-Dashboard/\"\r\n  },\r\n  {\r\n    \"id\": 3,\r\n    \"name\": \"Work Day Scheduler\",\r\n    \"image\": \"../../images/WorkDayScheduler.jpg\",\r\n    \"description\": \"Allows the user to saves tasks and highlight future work hours. Tasks are saved in local storage and moment.js is used to highlight the hour of the day block.\",\r\n    \"gihub\": \"https://github.com/denzgrant/Work-Day-Scheduler\",\r\n    \"url\": \"https://denzgrant.github.io/Work-Day-Scheduler/\"\r\n  },\r\n  {\r\n    \"id\": 4,\r\n    \"name\": \"Eat-Da-Burger\",\r\n    \"image\": \"../../images/eatdaburger.jpg\",\r\n    \"description\": \"Eat-Da-Burger! is a restaurant app that lets users input the name of burgers they'd like to eat mad with Express and MySQL. This project follows the MVC design.\",\r\n    \"gihub\": \"https://github.com/denzgrant/Eat-Da-Burger-\",\r\n    \"url\": \"https://drg-eat-da-burger.herokuapp.com/\"\r\n  },\r\n  {\r\n    \"id\": 5,\r\n    \"name\": \"DasFlix\",\r\n    \"image\": \"/FitnessTracker.gif\",\r\n    \"description\": \"A full-stack application where the user can create watchlists consisting of cards representing movies/tv shows, these cards are rendered to the page from a third party API. Local username and password authentication is used to access the website. The userâ€™s watchlist, password, and username is stored in a database. Feel free to use the test login, username: '1@1'. password: '1'\",\r\n    \"gihub\": \"https://github.com/denzgrant/DasFlix-\",\r\n    \"url\": \"http://www.dasflix.com/\"\r\n  },\r\n  {\r\n    \"id\": 6,\r\n    \"name\": \"Workout Tracker\",\r\n    \"image\": \"../../images/dasFlix.jpg\",\r\n    \"description\": \"Workout Tracker application that utilizes Mongoose to allow the user to add new exercises to a new workout plan or add exercises to a previous workout plan. A stats page is rendered based on the multiples exercises created.\",\r\n    \"gihub\": \"https://github.com/denzgrant/Workout-Tracker\",\r\n    \"url\": \"http://lower-goose-19055.herokuapp.com/\"\r\n  }\r\n]\r\n\r\n\r\n\r\nconst Portfolio = () => {\r\n  return (\r\n    <>\r\n      <MDBContainer>\r\n        <MDBRow>\r\n          {projects.map(proj => (\r\n            <MDBCol sm=\"6\" md=\"6\">\r\n              <MDBCard style={{ width: \"25rem\", height: \"20rem\", marginTop: \"3em\" }}>\r\n                <MDBCardImage className=\"img-fluid\" src={('proj.image')} waves />\r\n                <MDBCardBody>\r\n                  <MDBCardTitle>{proj.name}</MDBCardTitle>\r\n                  <MDBCardText>\r\n                    {proj.description}\r\n                  </MDBCardText>\r\n                  <MDBBtn href={proj.gihub} target=\"_blank\">Github</MDBBtn>\r\n                  <MDBBtn href={proj.url} target=\"_blank\">Demo</MDBBtn>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n          ))}\r\n        </MDBRow>\r\n      </MDBContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Portfolio;"]},"metadata":{},"sourceType":"module"}