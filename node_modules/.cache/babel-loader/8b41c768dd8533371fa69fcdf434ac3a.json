{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\owner\\\\Desktop\\\\BootCamp\\\\React Portfolio\\\\react_portfolio\\\\src\\\\components\\\\Portfolio\\\\Portfolio.js\";\nimport React from 'react';\nimport { MDBBtn, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol, MDBContainer, MDBRow } from 'mdbreact';\nimport dineImg from 'DineInDineOut.jpeg';\nimport weatherImg from 'WeatherDashboard.png';\nimport workDayImg from 'WorkDayScheduler.png';\nimport burgerImg from 'eatdaburger.jpg';\nimport dasImg from 'dasFlix.jpg';\nimport workOutImg from 'FitnessTracker.gif';\nimport './Portfolio.css';\nconst projects = [{\n  \"id\": 1,\n  \"name\": \"Dine-In or Dine-Out\",\n  \"image\": dineImg,\n  \"description\": \"Project where the user can input a type of meal and their zip code and then receive results of recipes or restaurants that serve the meal near them.\",\n  \"gihub\": \"https://github.com/denzgrant/SnapesOnAPlane\",\n  \"url\": \"https://denzgrant.github.io/SnapesOnAPlane/\"\n}, {\n  \"id\": 2,\n  \"name\": \"Weather Dashboard\",\n  \"image\": weatherImg,\n  \"description\": \"Weather Dashboard uses API calls to get the current and 5-Day forecast for any location by typing in the citie's name.\",\n  \"gihub\": \"https://github.com/denzgrant/Weather-Dashboard\",\n  \"url\": \"https://denzgrant.github.io/Weather-Dashboard/\"\n}, {\n  \"id\": 3,\n  \"name\": \"Work Day Scheduler\",\n  \"image\": workDayImg,\n  \"description\": \"Allows the user to saves tasks and highlight future work hours. Tasks are saved in local storage and moment.js is used to highlight the hour of the day block.\",\n  \"gihub\": \"https://github.com/denzgrant/Work-Day-Scheduler\",\n  \"url\": \"https://denzgrant.github.io/Work-Day-Scheduler/\"\n}, {\n  \"id\": 4,\n  \"name\": \"Eat-Da-Burger\",\n  \"image\": burgerImg,\n  \"description\": \"Eat-Da-Burger! is a restaurant app that lets users input the name of burgers they'd like to eat mad with Express and MySQL. This project follows the MVC design.\",\n  \"gihub\": \"https://github.com/denzgrant/Eat-Da-Burger-\",\n  \"url\": \"https://drg-eat-da-burger.herokuapp.com/\"\n}, {\n  \"id\": 5,\n  \"name\": \"DasFlix\",\n  \"image\": dasImg,\n  \"description\": \"A full-stack application where the user can create watchlists consisting of cards representing movies/tv shows, these cards are rendered to the page from a third party API. Local username and password authentication is used to access the website. The userâ€™s watchlist, password, and username is stored in a database. Feel free to use the test login, username: '1@1'. password: '1'\",\n  \"gihub\": \"https://github.com/denzgrant/DasFlix-\",\n  \"url\": \"http://www.dasflix.com/\"\n}, {\n  \"id\": 6,\n  \"name\": \"Workout Tracker\",\n  \"image\": workOutImg,\n  \"description\": \"Workout Tracker application that utilizes Mongoose to allow the user to add new exercises to a new workout plan or add exercises to a previous workout plan. A stats page is rendered based on the multiples exercises created.\",\n  \"gihub\": \"https://github.com/denzgrant/Workout-Tracker\",\n  \"url\": \"http://lower-goose-19055.herokuapp.com/\"\n}];\n\nconst Portfolio = () => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MDBContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MDBRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, projects.map((proj, index) => /*#__PURE__*/React.createElement(MDBCol, {\n    key: index,\n    sm: \"6\",\n    md: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MDBCard, {\n    style: {\n      width: \"22rem\",\n      marginTop: \"4em\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(MDBCardImage, {\n    className: \"img-fluid\",\n    src: proj.image,\n    waves: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(MDBCardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(MDBCardTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 19\n    }\n  }, proj.name), /*#__PURE__*/React.createElement(MDBCardText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 19\n    }\n  }, proj.description), /*#__PURE__*/React.createElement(MDBBtn, {\n    href: proj.gihub,\n    target: \"_blank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 19\n    }\n  }, \"Github\"), /*#__PURE__*/React.createElement(MDBBtn, {\n    href: proj.url,\n    target: \"_blank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 19\n    }\n  }, \"Demo\"))))))));\n};\n\nexport default Portfolio;","map":{"version":3,"sources":["C:/Users/owner/Desktop/BootCamp/React Portfolio/react_portfolio/src/components/Portfolio/Portfolio.js"],"names":["React","MDBBtn","MDBCard","MDBCardBody","MDBCardImage","MDBCardTitle","MDBCardText","MDBCol","MDBContainer","MDBRow","dineImg","weatherImg","workDayImg","burgerImg","dasImg","workOutImg","projects","Portfolio","map","proj","index","width","marginTop","image","name","description","gihub","url"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { MDBBtn, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol, MDBContainer, MDBRow } from 'mdbreact';\r\nimport dineImg from 'DineInDineOut.jpeg';\r\nimport weatherImg from 'WeatherDashboard.png';\r\nimport workDayImg from 'WorkDayScheduler.png';\r\nimport burgerImg from 'eatdaburger.jpg';\r\nimport dasImg from 'dasFlix.jpg';\r\nimport workOutImg from 'FitnessTracker.gif';\r\nimport './Portfolio.css'\r\n\r\n\r\n\r\n\r\nconst projects = [\r\n  {\r\n    \"id\": 1,\r\n    \"name\": \"Dine-In or Dine-Out\",\r\n    \"image\": dineImg,\r\n    \"description\": \"Project where the user can input a type of meal and their zip code and then receive results of recipes or restaurants that serve the meal near them.\",\r\n    \"gihub\": \"https://github.com/denzgrant/SnapesOnAPlane\",\r\n    \"url\": \"https://denzgrant.github.io/SnapesOnAPlane/\"\r\n  },\r\n  {\r\n    \"id\": 2,\r\n    \"name\": \"Weather Dashboard\",\r\n    \"image\": weatherImg,\r\n    \"description\": \"Weather Dashboard uses API calls to get the current and 5-Day forecast for any location by typing in the citie's name.\",\r\n    \"gihub\": \"https://github.com/denzgrant/Weather-Dashboard\",\r\n    \"url\": \"https://denzgrant.github.io/Weather-Dashboard/\"\r\n  },\r\n  {\r\n    \"id\": 3,\r\n    \"name\": \"Work Day Scheduler\",\r\n    \"image\": workDayImg,\r\n    \"description\": \"Allows the user to saves tasks and highlight future work hours. Tasks are saved in local storage and moment.js is used to highlight the hour of the day block.\",\r\n    \"gihub\": \"https://github.com/denzgrant/Work-Day-Scheduler\",\r\n    \"url\": \"https://denzgrant.github.io/Work-Day-Scheduler/\"\r\n  },\r\n  {\r\n    \"id\": 4,\r\n    \"name\": \"Eat-Da-Burger\",\r\n    \"image\": burgerImg,\r\n    \"description\": \"Eat-Da-Burger! is a restaurant app that lets users input the name of burgers they'd like to eat mad with Express and MySQL. This project follows the MVC design.\",\r\n    \"gihub\": \"https://github.com/denzgrant/Eat-Da-Burger-\",\r\n    \"url\": \"https://drg-eat-da-burger.herokuapp.com/\"\r\n  },\r\n  {\r\n    \"id\": 5,\r\n    \"name\": \"DasFlix\",\r\n    \"image\": dasImg,\r\n    \"description\": \"A full-stack application where the user can create watchlists consisting of cards representing movies/tv shows, these cards are rendered to the page from a third party API. Local username and password authentication is used to access the website. The userâ€™s watchlist, password, and username is stored in a database. Feel free to use the test login, username: '1@1'. password: '1'\",\r\n    \"gihub\": \"https://github.com/denzgrant/DasFlix-\",\r\n    \"url\": \"http://www.dasflix.com/\"\r\n  },\r\n  {\r\n    \"id\": 6,\r\n    \"name\": \"Workout Tracker\",\r\n    \"image\": workOutImg,\r\n    \"description\": \"Workout Tracker application that utilizes Mongoose to allow the user to add new exercises to a new workout plan or add exercises to a previous workout plan. A stats page is rendered based on the multiples exercises created.\",\r\n    \"gihub\": \"https://github.com/denzgrant/Workout-Tracker\",\r\n    \"url\": \"http://lower-goose-19055.herokuapp.com/\"\r\n  }\r\n]\r\n\r\n\r\n\r\nconst Portfolio = () => {\r\n  return (\r\n    <>\r\n      <MDBContainer >\r\n        <MDBRow>\r\n          {projects.map((proj, index) => (\r\n            <MDBCol key={index} sm=\"6\" md=\"6\">\r\n              <MDBCard style={{ width: \"22rem\", marginTop: \"4em\" }}>\r\n                <MDBCardImage className=\"img-fluid\" src={proj.image} waves />\r\n                <MDBCardBody>\r\n                  <MDBCardTitle>{proj.name}</MDBCardTitle>\r\n                  <MDBCardText>\r\n                    {proj.description}\r\n                  </MDBCardText>\r\n                  <MDBBtn href={proj.gihub} target=\"_blank\">Github</MDBBtn>\r\n                  <MDBBtn href={proj.url}  target=\"_blank\">Demo</MDBBtn>\r\n                </MDBCardBody>\r\n              </MDBCard>\r\n            </MDBCol>\r\n          ))}\r\n        </MDBRow>\r\n      </MDBContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Portfolio;"]},"metadata":{},"sourceType":"module"}